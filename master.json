{"meta":{"version":"2.0.2","format":20,"date":1748389386522},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n  <p>\n    <img src=\"static/logo.png\" alt=\"dbots.js logo\" width=\"200\" />\n  </p>\n  <p>A stats poster and API wrapper for all botlists.</p>\n  <p>\n    <a href=\"https://www.npmjs.com/package/dbots\">\n      <img src=\"https://img.shields.io/npm/v/dbots.svg?maxAge=3600\" alt=\"NPM version\" />\n    </a>\n    <a href=\"https://www.npmjs.com/package/dbots\">\n      <img src=\"https://img.shields.io/npm/dt/dbots.svg?maxAge=3600\" alt=\"NPM downloads\" />\n    </a>\n    <br/>\n    <a href=\"https://github.com/dbots-pkg/dbots.js/actions?query=workflow%3ATest\">\n      <img src=\"https://github.com/dbots-pkg/dbots.js/workflows/Test/badge.svg\" alt=\"Tests\" />\n    </a>\n    <a href=\"https://deepscan.io/dashboard#view=project&tid=11596&pid=14801&bid=284012\">\n      <img src=\"https://deepscan.io/api/teams/11596/projects/14801/branches/284011/badge/grade.svg\" alt=\"DeepScan grade\">\n    </a>\n    <a href=\"https://codecov.io/gh/dbots-pkg/dbots.js\">\n      <img src=\"https://codecov.io/gh/dbots-pkg/dbots.js/branch/master/graph/badge.svg?token=VRsBf9XHjN\"/>\n    </a>\n  </p>\n  <p>\n    <a href=\"https://nodei.co/npm/dbots/\"><img src=\"https://nodei.co/npm/dbots.png\" alt=\"NPM info\" /></a>\n  </p>\n</div>\n\n<!-- omit in toc -->\n\n# Table of Contents\n\n- [About](#about)\n- [Installing](#installing)\n- [Supported Libraries](#supported-libraries)\n- [Supported Services](#supported-services)\n- [Changelog](#changelog)\n- [Contribution](#contribution)\n- [Other Links](#other-links)\n\n## About\n\n`dbots` helps [Discord](https://discordapp.com) bot developers group all your statistic posting needs into one poster, complete with separate posting, API wrappers for supported lists, and an interval to post to all services every `n` seconds.\n\n## Installing\n\nYou can install dbots by running this command:\n\n```sh\n# Stable\nnpm i dbots\nyarn add dbots\n\n# Master\nnpm i dbots-pkg/dbots.js#master\nyarn add ssh://github.com/dbots-pkg/dbots.js#master\n```\n\n## Supported Libraries\n\n| Creator                           | Name                                                                                                                                   |\n| --------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- |\n| Amish Shah (originally hydrabolt) | [![npm](static/npm.png)](https://npm.im/discord.js) [![GitHub](static/github.png)](https://github.com/discordjs/discord.js) discord.js |\n| izy521                            | [![npm](static/npm.png)](https://npm.im/discord.io) [![GitHub](static/github.png)](https://github.com/izy521/discord.io) discord.io    |\n| qeled                             | [![npm](static/npm.png)](https://npm.im/discordie) [![GitHub](static/github.png)](https://github.com/qeled/discordie) discordie        |\n| abalabahaha                       | [![npm](static/npm.png)](https://npm.im/eris) [![GitHub](static/github.png)](https://github.com/abalabahaha/eris) eris                 |\n| Lando                             | [![npm](static/npm.png)](https://npm.im/paracord) [![GitHub](static/github.png)](https://github.com/paracordjs/paracord) paracord      |\n\n## Supported Services\n\nThe supported services list has been moved into the website.\nYou can see a full (and automatically updated) list of usable services [here](https://dbots.js.org/#/docs/main/latest/general/services).\n\n## Changelog\n\nYou can see the changelog for every version [here](https://dbots.js.org/#/docs/main/latest/general/changelog).\n\n## Contribution\n\nAny contribution may be useful for the package! Make sure when making issues or PRs that the matter has not been addressed yet in a past issue/PR.\n\n## Other Links\n\n- [NPM](https://npmjs.org/package/dbots)\n- [Yarn](https://yarn.pm/dbots)\n- [JSDelivr](https://www.jsdelivr.com/package/npm/dbots)\n- [Website](https://dbots.js.org) ([source](https://github.com/dbots-pkg/dbots-pkg.github.io))\n- [Documentation](https://dbots.js.org/#/docs)\n- [Dbots GitHub Organization](https://github.com/dbots-pkg)\n","path":"README.md"},"services":{"name":"Supported Services","type":"md","content":"# Supported Services (15)\n\n<div align=center>\n  <p>\n    <img src=\"https://botlist.me/icon.png\" alt=\"botlistme logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"botlistme\"></i>\n  <i id=\"botlist.me\"></i>\n  <a href=\"https://botlist.me/\"><h1>BotlistMe</h1></a>\n\nKeys: `botlistme`, `botlist.me`  \nClass: [BotlistMe](/#/docs/main/$$$ref/class/BotlistMe)  \nWebsite: https://botlist.me/\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://bots.ondiscord.xyz/favicon/android-chrome-256x256.png\" alt=\"botsondiscord logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"botsondiscord\"></i>\n  <i id=\"bots.ondiscord.xyz\"></i>\n  <a href=\"https://bots.ondiscord.xyz\"><h1>Bots On Discord</h1></a>\n\nKeys: `botsondiscord`, `bots.ondiscord.xyz`  \nClass: [BotsOnDiscord](/#/docs/main/$$$ref/class/BotsOnDiscord)  \nWebsite: https://bots.ondiscord.xyz\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://get.snaz.in/7N8ywwr.png\" alt=\"carbonitex logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"carbonitex\"></i>\n  <i id=\"carbonitex.net\"></i>\n  <i id=\"carbon\"></i>\n  <a href=\"https://www.carbonitex.net/Discord/bots\"><h1>Carbonitex</h1></a>\n\nKeys: `carbonitex`, `carbonitex.net`, `carbon`  \nClass: [Carbon](/#/docs/main/$$$ref/class/Carbon)  \nWebsite: https://www.carbonitex.net/Discord/bots\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://avatars.githubusercontent.com/u/68995595\" alt=\"dlistgg logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"dlistgg\"></i>\n  <i id=\"dlist.gg\"></i>\n  <i id=\"discordlistgg\"></i>\n  <i id=\"discordlist.gg\"></i>\n  <a href=\"https://discordlist.gg\"><h1>dlist.gg</h1></a>\n\nKeys: `dlistgg`, `dlist.gg`, `discordlistgg`, `discordlist.gg`  \nClass: [DList](/#/docs/main/$$$ref/class/DList)  \nWebsite: https://discordlist.gg\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://discordbotlist.com/android-icon-192x192.png\" alt=\"discordbotlist logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"discordbotlist\"></i>\n  <i id=\"discordbotlist.com\"></i>\n  <a href=\"https://discordbotlist.com\"><h1>Discord Bot List</h1></a>\n\nKeys: `discordbotlist`, `discordbotlist.com`  \nClass: [DiscordBotList](/#/docs/main/$$$ref/class/DiscordBotList)  \nWebsite: https://discordbotlist.com\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://pbs.twimg.com/profile_images/1071582837030060032/kKV-I01n_400x400.jpg\" alt=\"discordbotsgg logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"discordbotsgg\"></i>\n  <i id=\"discord.bots.gg\"></i>\n  <a href=\"https://discord.bots.gg\"><h1>Discord Bots</h1></a>\n\nKeys: `discordbotsgg`, `discord.bots.gg`  \nClass: [DiscordBotsGG](/#/docs/main/$$$ref/class/DiscordBotsGG)  \nWebsite: https://discord.bots.gg\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://get.snaz.in/4KjWg91.png\" alt=\"discordextremelist logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"discordextremelist\"></i>\n  <i id=\"discordextremelist.xyz\"></i>\n  <a href=\"https://discordextremelist.xyz/\"><h1>Discord Extreme List</h1></a>\n\nKeys: `discordextremelist`, `discordextremelist.xyz`  \nClass: [DiscordExtremeList](/#/docs/main/$$$ref/class/DiscordExtremeList)  \nWebsite: https://discordextremelist.xyz/\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://discordservices.net/icon.png\" alt=\"discordservices logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"discordservices\"></i>\n  <i id=\"discordservices.net\"></i>\n  <a href=\"https://discordservices.net\"><h1>Discord Services</h1></a>\n\nKeys: `discordservices`, `discordservices.net`  \nClass: [DiscordServices](/#/docs/main/$$$ref/class/DiscordServices)  \nWebsite: https://discordservices.net\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://discords.com/bots/img/manifest/icon-512x512.png\" alt=\"botsfordiscord logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"botsfordiscord\"></i>\n  <i id=\"botsfordiscord.com\"></i>\n  <i id=\"discords\"></i>\n  <i id=\"discords.com\"></i>\n  <a href=\"https://discords.com/bots\"><h1>Discords.com</h1></a>\n\nKeys: `botsfordiscord`, `botsfordiscord.com`, `discords`, `discords.com`  \nClass: [DiscordsCom](/#/docs/main/$$$ref/class/DiscordsCom)  \nWebsite: https://discords.com/bots\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://disforge.com/assets/img/ui/categories/all-bots.png\" alt=\"disforge logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"disforge\"></i>\n  <i id=\"disforge.com\"></i>\n  <a href=\"https://disforge.com/bots\"><h1>Disforge</h1></a>\n\nKeys: `disforge`, `disforge.com`  \nClass: [Disforge](/#/docs/main/$$$ref/class/Disforge)  \nWebsite: https://disforge.com/bots\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.imgur.com/x0LCfAh.png\" alt=\"infinitybotlist logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"infinitybotlist\"></i>\n  <i id=\"infinitybotlist.com\"></i>\n  <i id=\"infinitybots\"></i>\n  <i id=\"infinitybots.gg\"></i>\n  <a href=\"https://infinitybots.gg/\"><h1>Infinity Bot List</h1></a>\n\nKeys: `infinitybotlist`, `infinitybotlist.com`, `infinitybots`, `infinitybots.gg`  \nClass: [InfinityBotList](/#/docs/main/$$$ref/class/InfinityBotList)  \nWebsite: https://infinitybots.gg/\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://radarcord.net/static/logo.png\" alt=\"radar logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"radar\"></i>\n  <i id=\"radarbots\"></i>\n  <i id=\"radarbotdirectory.xyz\"></i>\n  <i id=\"radarcord\"></i>\n  <i id=\"radarcord.net\"></i>\n  <a href=\"https://radarcord.net/\"><h1>Radarcord</h1></a>\n\nKeys: `radar`, `radarbots`, `radarbotdirectory.xyz`, `radarcord`, `radarcord.net`  \nClass: [Radarcord](/#/docs/main/$$$ref/class/Radarcord)  \nWebsite: https://radarcord.net/\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://top.gg/images/dblnew.png\" alt=\"topgg logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"topgg\"></i>\n  <i id=\"top.gg\"></i>\n  <a href=\"https://top.gg\"><h1>Top.gg</h1></a>\n\nKeys: `topgg`, `top.gg`  \nClass: [TopGG](/#/docs/main/$$$ref/class/TopGG)  \nWebsite: https://top.gg\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://gblobscdn.gitbook.com/spaces%2F-MFw3t62urLlBeats8UJ%2Favatar-1598748054479.png\" alt=\"voidbots logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"voidbots\"></i>\n  <i id=\"voidbots.net\"></i>\n  <a href=\"https://voidbots.net/\"><h1>Void Bots</h1></a>\n\nKeys: `voidbots`, `voidbots.net`  \nClass: [VoidBots](/#/docs/main/$$$ref/class/VoidBots)  \nWebsite: https://voidbots.net/\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.imgur.com/OFiMern.png\" alt=\"yabl logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"yabl\"></i>\n  <i id=\"yabl.xyz\"></i>\n  <a href=\"https://yabl.xyz/\"><h1>Yet Another Bot List</h1></a>\n\nKeys: `yabl`, `yabl.xyz`  \nClass: [YABL](/#/docs/main/$$$ref/class/YABL)  \nWebsite: https://yabl.xyz/\n</div>","path":"docs/general/services.md"},"changelog":{"name":"Changelog","type":"md","content":"# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\nYou can see the docs for every version at [here](https://dbots.js.org/#/docs).\n\n## [Unreleased]\n\n## [11.0.0] - 2022-01-19\n\n### Removed:\n\n- **[BREAKING]** GlennBotList: service is dead\n\n### Fixed:\n\n- **[BREAKING]** FatesList: update API to latest version & remove additional endpoints for maintainability\n- InfinityBotList: update endpoints\n- DiscordListSpace: fix request body & docs URL\n- DiscordExtremeList: fix docs URL\n\n## [10.0.0] - 2021-10-08\n\n### Removed:\n\n- **[BREAKING]** AstroBotList (#334)\n- **[BREAKING]** DiscordBotsCo (#334)\n\n### Added:\n\n- Listcord (#334)\n- MotionBotlist (#334)\n- DiscordBotlistEU (#318, #319)\n- DiscordLabs: support votes endpoint (#334)\n- BotsForDiscord -> DiscordsCom: support `hasVoted12h` endpoint (#334)\n\n### Fixed:\n\n- **[BREAKING]** DiscordListSpace: update endpoints to new API version (#334)\n- **[BREAKING]** BladeBotLit -> BladeList: update endpoints to new API version (#334)\n- BotsForDiscord -> DiscordsCom: add endpoint requirements (#334)\n- InfinityBotList: update endpoints (#334)\n- DiscordListology: fix logo in docs (#334)\n- TopCord: fix logo in docs (#320)\n\n## [9.0.1] - 2021-08-04\n\n### Fixed:\n\n- BotsForDiscord: updated the base API URL and the logo URL\n\n## [9.0.0] - 2021-04-08\n\n### Global breaking changes:\n\n- `serviceClasses`: the `serviceClasses` property will no longer be exported as a member of the module. You can still get a record with every list using `Service.getAll()`. (#203)\n- We're dropping support for internal class names: that means that from now on, we could change the service class names without marking it as a breaking change. In order to avoid issues with your code, please use the `Service.get()` method to get service classes, instead of importing them directly. This version already contains some changes to class names, so make sure that you're importing them in the supported way. (#203)\n- Removed services: Arcane, BotsDataBase, DiscordAppsDev, DiscordBotsDirectory, ListMyBots, ParadiseBots (#204).\n  These lists have been removed because they've been shut down.\n\nMore list-specific breaking changes are listed below\n\n### Fixed:\n\n- **[BREAKING]** InfinityBots: update list name, aliases and URL (#199)\n- The package file now has a proper typings field\n- Clients: the fillers now calculate the user count using each guild's member count, instead of relying on the user cache size (ref #182)\n- Clients: improved consistency in getters' return types\n- DiscordJS: fixed the way that the filler gets the shard ID for discord.js@v12 (#184)\n- BotListSpace: update list name and URL (#202)\n\n### Added:\n\n- New service: FatesList (#186)\n\n### Fixed:\n\n## [8.0.2] - 2021-03-23\n\n### Fixed:\n\n- TopGG: require authentication on every class method, in order to fix API rejections (issue #174)\n\n## [8.0.1] - 2021-03-04\n\n### Fixed:\n\n- Rename files as 8.0.0 should have done.\n\n## [8.0.0] - 2021-03-04\n\n### Changed:\n\n- InfinityBotList is now called InfinityBots. Their aliases have changed too.\n\n## [7.0.1] - 2021-02-25\n\n### Fixed:\n\n- DisTop: removed since they disappeared\n- TopCord: update to new API version\n- Blist: update to new API version\n\n## [7.0.0] - 2021-02-25\n\n### Removed:\n\nYou can refer to issue #58 for each of these lists\n\n- LBots\n- DBLista\n- DiscordBotWorld\n- MythicalBots: they became IdleDev, which is unreachable at the moment.\n\n### Added:\n\n- DiscordBotDirectory (#101)\n- VoidBots (#102, #114)\n- Disforge (#103)\n- ParadiseBots (#104)\n- BladeBotList (#115)\n- DisTop (#121)\n- Dbots (#122)\n\n### Fixed:\n\n- InfinityBotList: updated to new API version (#144)\n\n## [6.1.0] - 2021-01-07\n\n### Added:\n\n- New service: Infinity Bot List (issue #99)\n\n## [6.0.0] - 2021-01-05\n\nWe know the list of changes is huge, so here's the gist of it:\n\n- If you only posted stats using the `Poster` class then nothing should change for you\n- If you used one of the service classes, make sure that the property names you're accessing haven't changed (they shouldn't though)\n- If you imported from any of the internal files of the package, make sure to check the list below for changes\n- You can now use accurate TypeScript typings with this package\n\nYou can also refer to issue #71.\n\n### Potentially breaking changes:\n\n- `*` - The whole package is now written in TypeScript. The scripts have changed too.\n- `*` - JSDoc annotation no longer have types, everything that can be moved to TS should no longer be written in JSDoc\n  - `@private` tags can still be used when we want to mark something as \"private\" for the docs website, but it's not an actual private property\n- `*` - In the whole package, internal `module.exports =` exports have been replaced by `default` exports\n- `*` - In the whole package, functions and methods no longer return `null` when only `undefined` is documented; if they can return `null` it will be explicitly documented\n- `*` - In the whole package, it's preferred to create a dedicated type/interface to document function argument, instead of using an \"inline type\"\n- `index` - Each service class now has to be accessed via the `dbots.serviceClasses` constant, instead of directly from `dbots` (e.g. `dbots.Arcane` now becomes `dbots.serviceClasses.Arcane`)\n- `index` - two functions have been renamed to camelCase (`formatRequest` and `ensurePromise`)\n- `Utils/Constants` - In `PostRequestData`, multiple properties are now optional\n- `Utils/Constants` - The supported `Poster` events have been renamed\n- `Utils/DbotsError` - The exported `Error`, `TypeError`, and `RangeError` classes are now grouped under the `errors` exported constant (e.g. `dbotserror.Error` is now `dbotserror.errors.Error`)\n- `Utils/FormatRequest` - In `RequestForm`, multiple properties are now optional\n- `Utils/FormatRequest` - `FormatRequest` no longer supports aliases for some options; the correct option name is enforced by the type of the argument\n- `Utils/Util` - added the `AnyObject` type and the `assert` function\n- `Interface/ServiceBase` - The `ServiceBase.name` static property is now called `ServiceBase.serviceName`, in order to avoid conflicts with the `Function.name` property\n- `Interface/Lists/*` - They all extend `ServiceBase`, and so they all have the change above\n- `Interface/ClientFiller` - circular imports have been removed, the static class method is now a separate function\n- `Interface/ClientFiller` - the new function to get client fillers does not support library aliases; the argument now uses the `Library` type\n- `Service` has been renamed to `ServiceKey`\n- `ServiceBase` has been renamed to `Service`\n\n### Added:\n\n- TypeScript support\n- New service: AstroBotList\n- New client: Paracord\n\n## [5.2.0] - 2020-10-07\n\n### Added:\n\n- DiscordServices has been added.\n\n## [5.1.0] - 2020-09-25\n\n### Added:\n\n- 5 new services have been added: DiscordLabs, Blist, TopCord, DiscordListology, and DiscordBotsCo.\n\n## [5.0.4] - 2020-07-28\n\n### Fixed:\n\n- ServiceBase: fixed an issue that caused this file to throw an error when the `NODE_ENV` env variable was set to `production`.\n\n## [5.0.3] - 2020-07-09\n\n### Fixed:\n\n- MythicalBots: updated URL for stats posting.\n\n## [5.0.2] - 2020-07-04\n\n### Fixed:\n\n- SpaceBotList: updated website and API URL.\n\n## [5.0.1] - 2020-06-29\n\n### Fixed\n\n- DiscordExtremeList: fixed endpoint for stats posting.\n\n## [5.0.0] - 2020-06-27\n\n### Added\n\n- ServiceBase: added the `ServiceBase.getAll()` method, which returns all the loaded services.\n\n### Changed\n\n- **[BREAKING]** DiscordExtremeList: the API has been updated to v2, adding shard posting and removing the `.getWidgetURL()` method.\n\n### Removed\n\n- **[BREAKING]** BotsOfDiscord: the bot list has been closed, the whole class has been removed.\n\n### Fixed\n\n- Arcane: updated endpoints with the new URL.\n\n## [4.1.0] - 2020-06-18\n\n### Added\n\n- Add new service: BotsDataBase\n\n## [4.0.0] - 2020-06-07\n\n### Added\n\n- Add better error handling for when requests to services get rejected.\n\n### Changed\n\n- **[BREAKING]** ListMyBots: Update class methods, check the docs to see the new class.\n- **[BREAKING]** GlennBotList: `.getProfile()` is now called `.getUser()` (we're skipping deprecation since we're publishing a major version anyway).\n\n### Removed\n\n- **[BREAKING]** DiscordBotList: removed the `.getWidgetURL()` method since the list has switched to [JavaScript widgets](https://docs.discordbotlist.com/javascript-widget).\n\n### Fixed\n\n- Update endpoints for ListMyBots, GlennBotList and DiscordBotList.\n\n<!-- prettier-ignore -->\n[Unreleased]: https://github.com/dbots-pkg/dbots.js/compare/v11.0.0...HEAD\n[4.0.0]: https://github.com/dbots-pkg/dbots.js/compare/v3.0.1...v4.0.0\n[4.1.0]: https://github.com/dbots-pkg/dbots.js/compare/v4.0.0...v4.1.0\n[5.0.0]: https://github.com/dbots-pkg/dbots.js/compare/v4.1.0...v5.0.0\n[5.0.1]: https://github.com/dbots-pkg/dbots.js/compare/v5.0.0...v5.0.1\n[5.0.2]: https://github.com/dbots-pkg/dbots.js/compare/v5.0.1...v5.0.2\n[5.0.3]: https://github.com/dbots-pkg/dbots.js/compare/v5.0.2...v5.0.3\n[5.0.4]: https://github.com/dbots-pkg/dbots.js/compare/v5.0.3...v5.0.4\n[5.1.0]: https://github.com/dbots-pkg/dbots.js/compare/v5.0.4...v5.1.0\n[5.2.0]: https://github.com/dbots-pkg/dbots.js/compare/v5.1.0...v5.2.0\n[6.0.0]: https://github.com/dbots-pkg/dbots.js/compare/v5.2.0...v6.0.0\n[6.1.0]: https://github.com/dbots-pkg/dbots.js/compare/v6.0.0...v6.1.0\n[7.0.0]: https://github.com/dbots-pkg/dbots.js/compare/v6.1.0...v7.0.0\n[7.0.1]: https://github.com/dbots-pkg/dbots.js/compare/v7.0.0...v7.0.1\n[8.0.0]: https://github.com/dbots-pkg/dbots.js/compare/v7.0.1...v8.0.0\n[8.0.1]: https://github.com/dbots-pkg/dbots.js/compare/v8.0.0...v8.0.1\n[8.0.2]: https://github.com/dbots-pkg/dbots.js/compare/v8.0.1...v8.0.2\n[9.0.0]: https://github.com/dbots-pkg/dbots.js/compare/v8.0.2...v9.0.0\n[9.0.1]: https://github.com/dbots-pkg/dbots.js/compare/v9.0.0...v9.0.1\n[10.0.0]: https://github.com/dbots-pkg/dbots.js/compare/v9.0.0...v10.0.0\n[11.0.0]: https://github.com/dbots-pkg/dbots.js/compare/v10.0.0...v11.0.0\n","path":"CHANGELOG.md"}}},"examples":{"name":"Examples","files":{"client":{"name":"With a Client","type":"js","content":"const Discord = require('discord.js')\nconst client = new Discord.Client()\nconst dbots = require('dbots')\n\n// Make sure the client has logged in before initializing a poster.\nclient.on('ready', () => {\n  const poster = new dbots.Poster({\n    client,\n    apiKeys: {\n      discordbotsgg: '…',\n      topgg: '…',\n      lsterminalink: '…',\n      carbon: '…'\n    },\n    clientLibrary: 'discord.js'\n  })\n\n  // Starts an interval thats posts to all services every 30 minutes.\n  poster.startInterval()\n})\n","path":"docs/examples/client.js"},"no-client":{"name":"Without a Client","type":"js","content":"const dbots = require('dbots')\nconst poster = new dbots.Poster({\n  clientID: '000000000000000000',\n  apiKeys: {\n    discordbotsgg: '…',\n    topgg: '…',\n    lsterminalink: '…',\n    carbon: '…'\n  },\n  serverCount: async () => 1234,\n  userCount: async () => 1234,\n  voiceConnections: async () => 1234\n})\n\n// If the service is undefined, it posts to all services provided with a key.\nposter.post('carbon')\n","path":"docs/examples/no-client.js"},"custom-service":{"name":"Custom Services","type":"js","content":"const dbots = require('dbots')\n\n// This does not explicitly have to be a class\n// As long as it follows the same structure\nclass MyCustomService {\n  static get aliases() {\n    return ['a', 'string', 'array']\n  }\n\n  static async post(options) {\n    const { token, clientID, serverCount, userCount, voiceConnections, shard } = options\n    return yourCustomPostMethod(token, clientID, serverCount, userCount, voiceConnections, shard)\n  }\n}\n\nconst poster = new dbots.Poster({\n  clientID: '000000000000000000',\n  apiKeys: {\n    discordbotsgg: '…',\n    topgg: '…',\n    lsterminalink: '…',\n    carbon: '…'\n  },\n  customServices: [new MyCustomService()],\n  serverCount: async () => 1234,\n  userCount: async () => 1234,\n  voiceConnections: async () => 1234\n})\n","path":"docs/examples/custom-service.js"},"service-class":{"name":"Using Service classes","type":"js","content":"const dbots = require('dbots')\n\n// You can get the service class through the Service util, using a service alias\nconst TopGG = dbots.Service.get('topgg')\n\n// You can craete an instance using your token, that will allow you to access the API\nconst serviceInstance = new TopGG('your-token')\n\n// You can then use every method listed in the class docs\nserviceInstance.getBot('bot-id')\n  .then(data => {\n    // ...\n  })\n  .catch(console.error)\n","path":"docs/examples/service-class.js"}}}},"classes":[{"name":"ClientFiller","description":"A class that gets certain values from a client.","access":"private","construct":{"name":"constructor","params":[{"name":"client","description":"The client that will be used","type":[[["object"]]]}],"returns":[[["ClientFiller"]]],"meta":{"line":16,"file":"ClientFiller.ts","path":"src/Interface"}},"props":[{"name":"client","description":"The client that will be used for the filler.","type":[[["AnyObject"]]],"meta":{"line":11,"file":"ClientFiller.ts","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":38,"file":"ClientFiller.ts","path":"src/Interface"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached.","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":28,"file":"ClientFiller.ts","path":"src/Interface"}},{"name":"shard","description":"Gets the shard of the bot.","readonly":true,"type":[[["undefined"," | "],["Shard"]]],"meta":{"line":43,"file":"ClientFiller.ts","path":"src/Interface"}},{"name":"userCount","description":"Gets the amount of users the bot can reach.","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":23,"file":"ClientFiller.ts","path":"src/Interface"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using.","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":33,"file":"ClientFiller.ts","path":"src/Interface"}}],"meta":{"line":9,"file":"ClientFiller.ts","path":"src/Interface"}},{"name":"DiscordIO","description":"Represents the client filler for discord.io clients.","extends":["ClientFiller"],"access":"private","construct":{"name":"constructor","params":[{"name":"client","description":"The client that will be used","type":[[["object"]]]}],"returns":[[["default"]]]},"props":[{"name":"client","description":"The client that will be used for the filler.","type":[[["AnyObject"]]],"meta":{"line":11,"file":"ClientFiller.ts","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":28,"file":"DiscordIO.ts","path":"src/Interface/Clients"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached.","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":18,"file":"DiscordIO.ts","path":"src/Interface/Clients"}},{"name":"shard","description":"Gets the shard of the bot.","readonly":true,"type":[[["undefined"," | "],["Shard"]]],"meta":{"line":32,"file":"DiscordIO.ts","path":"src/Interface/Clients"}},{"name":"userCount","description":"Gets the amount of users the bot can reach.","readonly":true,"type":[[["any"]]],"meta":{"line":10,"file":"DiscordIO.ts","path":"src/Interface/Clients"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using.","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":23,"file":"DiscordIO.ts","path":"src/Interface/Clients"}}],"meta":{"line":9,"file":"DiscordIO.ts","path":"src/Interface/Clients"}},{"name":"DiscordJS","description":"Represents the client filler for discord.js clients.","extends":["ClientFiller"],"access":"private","construct":{"name":"constructor","params":[{"name":"client","description":"The client that will be used","type":[[["object"]]]}],"returns":[[["default"]]]},"props":[{"name":"client","description":"The client that will be used for the filler.","type":[[["AnyObject"]]],"meta":{"line":11,"file":"ClientFiller.ts","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":39,"file":"DiscordJS.ts","path":"src/Interface/Clients"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached.","readonly":true,"type":[[["number"]]],"meta":{"line":25,"file":"DiscordJS.ts","path":"src/Interface/Clients"}},{"name":"shard","description":"Gets the shard of the bot.","readonly":true,"type":[[["undefined"," | "],["Shard"]]],"meta":{"line":43,"file":"DiscordJS.ts","path":"src/Interface/Clients"}},{"name":"userCount","description":"Gets the amount of users the bot can reach.","readonly":true,"type":[[["number"]]],"meta":{"line":10,"file":"DiscordJS.ts","path":"src/Interface/Clients"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using.","readonly":true,"type":[[["number"]]],"meta":{"line":32,"file":"DiscordJS.ts","path":"src/Interface/Clients"}}],"meta":{"line":9,"file":"DiscordJS.ts","path":"src/Interface/Clients"}},{"name":"Discordie","description":"Represents the client filler for discordie clients.","extends":["ClientFiller"],"access":"private","construct":{"name":"constructor","params":[{"name":"client","description":"The client that will be used","type":[[["object"]]]}],"returns":[[["default"]]]},"props":[{"name":"client","description":"The client that will be used for the filler.","type":[[["AnyObject"]]],"meta":{"line":11,"file":"ClientFiller.ts","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":25,"file":"Discordie.ts","path":"src/Interface/Clients"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached.","readonly":true,"type":[[["number"]]],"meta":{"line":17,"file":"Discordie.ts","path":"src/Interface/Clients"}},{"name":"shard","description":"Gets the shard of the bot.","readonly":true,"type":[[["undefined"," | "],["Shard"]]],"meta":{"line":29,"file":"Discordie.ts","path":"src/Interface/Clients"}},{"name":"userCount","description":"Gets the amount of users the bot can reach.","readonly":true,"type":[[["number"]]],"meta":{"line":10,"file":"Discordie.ts","path":"src/Interface/Clients"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using.","readonly":true,"type":[[["number"]]],"meta":{"line":21,"file":"Discordie.ts","path":"src/Interface/Clients"}}],"meta":{"line":9,"file":"Discordie.ts","path":"src/Interface/Clients"}},{"name":"Eris","description":"Represents the client filler for Eris clients.","extends":["ClientFiller"],"access":"private","construct":{"name":"constructor","params":[{"name":"client","description":"The client that will be used","type":[[["object"]]]}],"returns":[[["default"]]]},"props":[{"name":"client","description":"The client that will be used for the filler.","type":[[["AnyObject"]]],"meta":{"line":11,"file":"ClientFiller.ts","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":33,"file":"Eris.ts","path":"src/Interface/Clients"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached.","readonly":true,"type":[[["number"]]],"meta":{"line":16,"file":"Eris.ts","path":"src/Interface/Clients"}},{"name":"shard","description":"<warn>This client does not natively support sharding.</warn>","access":"private","readonly":true,"type":[[["undefined"]]],"meta":{"line":41,"file":"Eris.ts","path":"src/Interface/Clients"}},{"name":"userCount","description":"Gets the amount of users the bot can reach.","readonly":true,"type":[[["number"]]],"meta":{"line":9,"file":"Eris.ts","path":"src/Interface/Clients"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using.","readonly":true,"type":[[["number"]]],"meta":{"line":20,"file":"Eris.ts","path":"src/Interface/Clients"}}],"meta":{"line":8,"file":"Eris.ts","path":"src/Interface/Clients"}},{"name":"Paracord","description":"Represents the client filler for Paracord clients.","extends":["ClientFiller"],"access":"private","construct":{"name":"constructor","params":[{"name":"client","description":"The client that will be used","type":[[["object"]]]}],"returns":[[["default"]]]},"props":[{"name":"client","description":"The client that will be used for the filler.","type":[[["AnyObject"]]],"meta":{"line":11,"file":"ClientFiller.ts","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":29,"file":"Paracord.ts","path":"src/Interface/Clients"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached.","readonly":true,"type":[[["number"]]],"meta":{"line":17,"file":"Paracord.ts","path":"src/Interface/Clients"}},{"name":"shard","description":"<warn>This client handles sharding in a way that is not supported by dbots in its current structure.</warn>","access":"private","readonly":true,"type":[[["undefined"]]],"meta":{"line":37,"file":"Paracord.ts","path":"src/Interface/Clients"}},{"name":"userCount","description":"Gets the amount of users the bot can reach.","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":9,"file":"Paracord.ts","path":"src/Interface/Clients"}},{"name":"voiceConnections","description":"<warn>This client does not yet support voice connections.</warn>","access":"private","readonly":true,"type":[[["undefined"]]],"meta":{"line":25,"file":"Paracord.ts","path":"src/Interface/Clients"}}],"meta":{"line":8,"file":"Paracord.ts","path":"src/Interface/Clients"}},{"name":"BotlistMe","description":"Represents the BotlistMe service.","see":["https://docs.botlist.me\n"],"extends":["Service"],"construct":{"name":"constructor","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}],"returns":[[["default"]]]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":46,"file":"Service.ts","path":"src/Interface"}},{"name":"aliases","description":"The values that can be used to select the service.","scope":"static","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":10,"file":"BotlistMe.ts","path":"src/Interface/Lists"}},{"name":"baseURL","description":"The base URL of the service's API.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":30,"file":"BotlistMe.ts","path":"src/Interface/Lists"}},{"name":"logoURL","description":"The logo URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":15,"file":"BotlistMe.ts","path":"src/Interface/Lists"}},{"name":"serviceName","description":"Service's name.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":20,"file":"BotlistMe.ts","path":"src/Interface/Lists"}},{"name":"websiteURL","description":"The website URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":25,"file":"BotlistMe.ts","path":"src/Interface/Lists"}}],"methods":[{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["string"]]],"returnsDescription":"The modified URL","meta":{"line":136,"file":"Service.ts","path":"src/Interface"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"options","description":"The options of this request","optional":true,"default":"{}","type":[[["ServiceRequestOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":112,"file":"Service.ts","path":"src/Interface"}},{"name":"userVoted","description":"Gets whether a user has voted for a bot.","params":[{"name":"botID","description":"The bot's ID.","type":[[["IDResolvable"]]]},{"name":"userID","description":"The user's ID.","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":54,"file":"BotlistMe.ts","path":"src/Interface/Lists"}},{"name":"_post","description":"Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.","scope":"static","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"appendBaseURL","description":"Whether to append the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":95,"file":"Service.ts","path":"src/Interface"}},{"name":"get","description":"Gets a service from a key.","scope":"static","params":[{"name":"key","description":"The name of the service to get","type":[[["string"]]]},{"name":"extras","description":"An array of {@link CustomService}s to include","optional":true,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["null"," | ("],["typeof"," "],["Service",")"]]],"meta":{"line":65,"file":"Service.ts","path":"src/Interface"}},{"name":"getAll","description":"Gets every loaded service.","scope":"static","returns":[[["Record","<"],["string",", ("],["typeof"," "],["Service",")>"]]],"meta":{"line":84,"file":"Service.ts","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.\n<warn>Shard data posting is not supported for this service.</warn>","scope":"static","params":[{"name":"options","description":"The options of the request.","type":[[["ServicePostOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":39,"file":"BotlistMe.ts","path":"src/Interface/Lists"}}],"meta":{"line":8,"file":"BotlistMe.ts","path":"src/Interface/Lists"}},{"name":"BotsOnDiscord","description":"Represents the Bots On Discord service.","see":["https://bots.ondiscord.xyz/info/api\n"],"extends":["Service"],"construct":{"name":"constructor","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}],"returns":[[["default"]]]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":46,"file":"Service.ts","path":"src/Interface"}},{"name":"aliases","description":"The values that can be used to select the service.","scope":"static","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":11,"file":"BotsOnDiscord.ts","path":"src/Interface/Lists"}},{"name":"baseURL","description":"The base URL of the service's API.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":31,"file":"BotsOnDiscord.ts","path":"src/Interface/Lists"}},{"name":"logoURL","description":"The logo URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":16,"file":"BotsOnDiscord.ts","path":"src/Interface/Lists"}},{"name":"serviceName","description":"Service's name.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":21,"file":"BotsOnDiscord.ts","path":"src/Interface/Lists"}},{"name":"websiteURL","description":"The website URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":26,"file":"BotsOnDiscord.ts","path":"src/Interface/Lists"}}],"methods":[{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["string"]]],"returnsDescription":"The modified URL","meta":{"line":136,"file":"Service.ts","path":"src/Interface"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"options","description":"The options of this request","optional":true,"default":"{}","type":[[["ServiceRequestOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":112,"file":"Service.ts","path":"src/Interface"}},{"name":"checkReview","description":"Checks whether or not a user has reviewed a bot.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"userId","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":55,"file":"BotsOnDiscord.ts","path":"src/Interface/Lists"}},{"name":"getWidgetURL","description":"Gets the widget URL for this bot.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"query","description":"The query string that will be used in the request","optional":true,"type":[[["Query"]]]}],"returns":[[["string"]]],"meta":{"line":73,"file":"BotsOnDiscord.ts","path":"src/Interface/Lists"}},{"name":"_post","description":"Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.","scope":"static","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"appendBaseURL","description":"Whether to append the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":95,"file":"Service.ts","path":"src/Interface"}},{"name":"get","description":"Gets a service from a key.","scope":"static","params":[{"name":"key","description":"The name of the service to get","type":[[["string"]]]},{"name":"extras","description":"An array of {@link CustomService}s to include","optional":true,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["null"," | ("],["typeof"," "],["Service",")"]]],"meta":{"line":65,"file":"Service.ts","path":"src/Interface"}},{"name":"getAll","description":"Gets every loaded service.","scope":"static","returns":[[["Record","<"],["string",", ("],["typeof"," "],["Service",")>"]]],"meta":{"line":84,"file":"Service.ts","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.\n<warn>Shard data posting is not supported for this service.</warn>","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["ServicePostOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":40,"file":"BotsOnDiscord.ts","path":"src/Interface/Lists"}}],"meta":{"line":9,"file":"BotsOnDiscord.ts","path":"src/Interface/Lists"}},{"name":"Carbon","description":"Represents the Carbonitex service.","extends":["Service"],"construct":{"name":"constructor","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}],"returns":[[["default"]]]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":46,"file":"Service.ts","path":"src/Interface"}},{"name":"aliases","description":"The values that can be used to select the service.","scope":"static","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":9,"file":"Carbon.ts","path":"src/Interface/Lists"}},{"name":"baseURL","description":"The base URL of the service's API.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":29,"file":"Carbon.ts","path":"src/Interface/Lists"}},{"name":"logoURL","description":"The logo URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":14,"file":"Carbon.ts","path":"src/Interface/Lists"}},{"name":"serviceName","description":"Service's name.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":19,"file":"Carbon.ts","path":"src/Interface/Lists"}},{"name":"websiteURL","description":"The website URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":24,"file":"Carbon.ts","path":"src/Interface/Lists"}}],"methods":[{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["string"]]],"returnsDescription":"The modified URL","meta":{"line":136,"file":"Service.ts","path":"src/Interface"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"options","description":"The options of this request","optional":true,"default":"{}","type":[[["ServiceRequestOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":112,"file":"Service.ts","path":"src/Interface"}},{"name":"getBots","description":"Gets a list of bots on this service.","returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":48,"file":"Carbon.ts","path":"src/Interface/Lists"}},{"name":"_post","description":"Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.","scope":"static","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"appendBaseURL","description":"Whether to append the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":95,"file":"Service.ts","path":"src/Interface"}},{"name":"get","description":"Gets a service from a key.","scope":"static","params":[{"name":"key","description":"The name of the service to get","type":[[["string"]]]},{"name":"extras","description":"An array of {@link CustomService}s to include","optional":true,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["null"," | ("],["typeof"," "],["Service",")"]]],"meta":{"line":65,"file":"Service.ts","path":"src/Interface"}},{"name":"getAll","description":"Gets every loaded service.","scope":"static","returns":[[["Record","<"],["string",", ("],["typeof"," "],["Service",")>"]]],"meta":{"line":84,"file":"Service.ts","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.\n<warn>Shard data posting is not supported for this service.</warn>","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["ServicePostOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":38,"file":"Carbon.ts","path":"src/Interface/Lists"}}],"meta":{"line":7,"file":"Carbon.ts","path":"src/Interface/Lists"}},{"name":"DList","description":"Represents the dlist.gg service.","see":["https://api.discordlist.gg/developers/\n"],"extends":["Service"],"construct":{"name":"constructor","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}],"returns":[[["default"]]]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":46,"file":"Service.ts","path":"src/Interface"}},{"name":"aliases","description":"The values that can be used to select the service.","scope":"static","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":10,"file":"DList.ts","path":"src/Interface/Lists"}},{"name":"baseURL","description":"The base URL of the service's API.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":30,"file":"DList.ts","path":"src/Interface/Lists"}},{"name":"logoURL","description":"The logo URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":15,"file":"DList.ts","path":"src/Interface/Lists"}},{"name":"serviceName","description":"Service's name.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":20,"file":"DList.ts","path":"src/Interface/Lists"}},{"name":"websiteURL","description":"The website URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":25,"file":"DList.ts","path":"src/Interface/Lists"}}],"methods":[{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["string"]]],"returnsDescription":"The modified URL","meta":{"line":136,"file":"Service.ts","path":"src/Interface"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"options","description":"The options of this request","optional":true,"default":"{}","type":[[["ServiceRequestOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":112,"file":"Service.ts","path":"src/Interface"}},{"name":"_post","description":"Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.","scope":"static","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"appendBaseURL","description":"Whether to append the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":95,"file":"Service.ts","path":"src/Interface"}},{"name":"get","description":"Gets a service from a key.","scope":"static","params":[{"name":"key","description":"The name of the service to get","type":[[["string"]]]},{"name":"extras","description":"An array of {@link CustomService}s to include","optional":true,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["null"," | ("],["typeof"," "],["Service",")"]]],"meta":{"line":65,"file":"Service.ts","path":"src/Interface"}},{"name":"getAll","description":"Gets every loaded service.","scope":"static","returns":[[["Record","<"],["string",", ("],["typeof"," "],["Service",")>"]]],"meta":{"line":84,"file":"Service.ts","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.\n<warn>Shard data posting is not supported for this service.</warn>","scope":"static","params":[{"name":"options","description":"The options of the request.","type":[[["ServicePostOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":39,"file":"DList.ts","path":"src/Interface/Lists"}}],"meta":{"line":8,"file":"DList.ts","path":"src/Interface/Lists"}},{"name":"DiscordBotList","description":"Represents the Discord Bot List service.","see":["https://discordbotlist.com/api-docs\n"],"extends":["Service"],"construct":{"name":"constructor","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}],"returns":[[["default"]]]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":46,"file":"Service.ts","path":"src/Interface"}},{"name":"aliases","description":"The values that can be used to select the service.","scope":"static","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":10,"file":"DiscordBotList.ts","path":"src/Interface/Lists"}},{"name":"baseURL","description":"The base URL of the service's API.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":30,"file":"DiscordBotList.ts","path":"src/Interface/Lists"}},{"name":"logoURL","description":"The logo URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":15,"file":"DiscordBotList.ts","path":"src/Interface/Lists"}},{"name":"serviceName","description":"Service's name.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":20,"file":"DiscordBotList.ts","path":"src/Interface/Lists"}},{"name":"websiteURL","description":"The website URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":25,"file":"DiscordBotList.ts","path":"src/Interface/Lists"}}],"methods":[{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["string"]]],"returnsDescription":"The modified URL","meta":{"line":136,"file":"Service.ts","path":"src/Interface"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"options","description":"The options of this request","optional":true,"default":"{}","type":[[["ServiceRequestOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":112,"file":"Service.ts","path":"src/Interface"}},{"name":"_post","description":"Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.","scope":"static","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"appendBaseURL","description":"Whether to append the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":95,"file":"Service.ts","path":"src/Interface"}},{"name":"get","description":"Gets a service from a key.","scope":"static","params":[{"name":"key","description":"The name of the service to get","type":[[["string"]]]},{"name":"extras","description":"An array of {@link CustomService}s to include","optional":true,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["null"," | ("],["typeof"," "],["Service",")"]]],"meta":{"line":65,"file":"Service.ts","path":"src/Interface"}},{"name":"getAll","description":"Gets every loaded service.","scope":"static","returns":[[["Record","<"],["string",", ("],["typeof"," "],["Service",")>"]]],"meta":{"line":84,"file":"Service.ts","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["ServicePostOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":38,"file":"DiscordBotList.ts","path":"src/Interface/Lists"}}],"meta":{"line":8,"file":"DiscordBotList.ts","path":"src/Interface/Lists"}},{"name":"DiscordBotsGG","description":"Represents the Discord Bots service.","see":["https://discord.bots.gg/docs\n"],"extends":["Service"],"construct":{"name":"constructor","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]},{"name":"userAgent","description":"The user agent options of the service. Providing this is highly recommended.","optional":true,"type":[[["DiscordBotsGGUserAgent"]]]}],"returns":[[["default"]]],"meta":{"line":27,"file":"DiscordBotsGG.ts","path":"src/Interface/Lists"}},"props":[{"name":"agent","description":"The user agent options for this service","access":"private","type":[[["DiscordBotsGGUserAgent"]]],"meta":{"line":20,"file":"DiscordBotsGG.ts","path":"src/Interface/Lists"}},{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":46,"file":"Service.ts","path":"src/Interface"}},{"name":"aliases","description":"The values that can be used to select the service.","scope":"static","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":36,"file":"DiscordBotsGG.ts","path":"src/Interface/Lists"}},{"name":"baseURL","description":"The base URL of the service's API.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":56,"file":"DiscordBotsGG.ts","path":"src/Interface/Lists"}},{"name":"logoURL","description":"The logo URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":41,"file":"DiscordBotsGG.ts","path":"src/Interface/Lists"}},{"name":"serviceName","description":"Service's name.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":46,"file":"DiscordBotsGG.ts","path":"src/Interface/Lists"}},{"name":"websiteURL","description":"The website URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":51,"file":"DiscordBotsGG.ts","path":"src/Interface/Lists"}}],"methods":[{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["string"]]],"returnsDescription":"The modified URL","meta":{"line":136,"file":"Service.ts","path":"src/Interface"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"options","description":"The options of this request","optional":true,"default":"{}","type":[[["ServiceRequestOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":112,"file":"Service.ts","path":"src/Interface"}},{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"sanitized","description":"Whether to sanitize descriptions","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":101,"file":"DiscordBotsGG.ts","path":"src/Interface/Lists"}},{"name":"getBots","description":"Gets a list of bots on this service.","params":[{"name":"query","description":"The query string that will be used in the request","optional":true,"type":[[["Query"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":124,"file":"DiscordBotsGG.ts","path":"src/Interface/Lists"}},{"name":"_post","description":"Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.","scope":"static","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"appendBaseURL","description":"Whether to append the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":95,"file":"Service.ts","path":"src/Interface"}},{"name":"get","description":"Gets a service from a key.","scope":"static","params":[{"name":"key","description":"The name of the service to get","type":[[["string"]]]},{"name":"extras","description":"An array of {@link CustomService}s to include","optional":true,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["null"," | ("],["typeof"," "],["Service",")"]]],"meta":{"line":65,"file":"Service.ts","path":"src/Interface"}},{"name":"getAll","description":"Gets every loaded service.","scope":"static","returns":[[["Record","<"],["string",", ("],["typeof"," "],["Service",")>"]]],"meta":{"line":84,"file":"Service.ts","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["ServicePostOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":77,"file":"DiscordBotsGG.ts","path":"src/Interface/Lists"}},{"name":"userAgent","description":"Creates a compliant user agent to use for any API calls to Discord Bots.","scope":"static","params":[{"name":"botID","description":"The ID of the bot that the agent will be identified with","type":[[["IDResolvable"]]]},{"name":"library","description":"The library the agent is using","optional":true,"default":"'unknown'","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":65,"file":"DiscordBotsGG.ts","path":"src/Interface/Lists"}}],"meta":{"line":18,"file":"DiscordBotsGG.ts","path":"src/Interface/Lists"}},{"name":"DiscordExtremeList","description":"Represents the Discord Extreme List service.","see":["https://discordextremelist.xyz/docs\n"],"extends":["Service"],"construct":{"name":"constructor","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}],"returns":[[["default"]]]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":46,"file":"Service.ts","path":"src/Interface"}},{"name":"aliases","description":"The values that can be used to select the service.","scope":"static","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":10,"file":"DiscordExtremeList.ts","path":"src/Interface/Lists"}},{"name":"baseURL","description":"The base URL of the service's API.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":30,"file":"DiscordExtremeList.ts","path":"src/Interface/Lists"}},{"name":"logoURL","description":"The logo URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":15,"file":"DiscordExtremeList.ts","path":"src/Interface/Lists"}},{"name":"serviceName","description":"Service's name.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":20,"file":"DiscordExtremeList.ts","path":"src/Interface/Lists"}},{"name":"websiteURL","description":"The website URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":25,"file":"DiscordExtremeList.ts","path":"src/Interface/Lists"}}],"methods":[{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["string"]]],"returnsDescription":"The modified URL","meta":{"line":136,"file":"Service.ts","path":"src/Interface"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"options","description":"The options of this request","optional":true,"default":"{}","type":[[["ServiceRequestOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":112,"file":"Service.ts","path":"src/Interface"}},{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":68,"file":"DiscordExtremeList.ts","path":"src/Interface/Lists"}},{"name":"getStatistics","description":"Gets the statistics of this service.","returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":52,"file":"DiscordExtremeList.ts","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":84,"file":"DiscordExtremeList.ts","path":"src/Interface/Lists"}},{"name":"_post","description":"Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.","scope":"static","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"appendBaseURL","description":"Whether to append the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":95,"file":"Service.ts","path":"src/Interface"}},{"name":"get","description":"Gets a service from a key.","scope":"static","params":[{"name":"key","description":"The name of the service to get","type":[[["string"]]]},{"name":"extras","description":"An array of {@link CustomService}s to include","optional":true,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["null"," | ("],["typeof"," "],["Service",")"]]],"meta":{"line":65,"file":"Service.ts","path":"src/Interface"}},{"name":"getAll","description":"Gets every loaded service.","scope":"static","returns":[[["Record","<"],["string",", ("],["typeof"," "],["Service",")>"]]],"meta":{"line":84,"file":"Service.ts","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["ServicePostOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":38,"file":"DiscordExtremeList.ts","path":"src/Interface/Lists"}}],"meta":{"line":8,"file":"DiscordExtremeList.ts","path":"src/Interface/Lists"}},{"name":"DiscordServices","description":"Represents the Discord Services service.","see":["https://discordservices.net/docs/api\n"],"extends":["Service"],"construct":{"name":"constructor","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}],"returns":[[["default"]]]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":46,"file":"Service.ts","path":"src/Interface"}},{"name":"aliases","description":"The values that can be used to select the service.","scope":"static","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":22,"file":"DiscordServices.ts","path":"src/Interface/Lists"}},{"name":"baseURL","description":"The base URL of the service's API.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":42,"file":"DiscordServices.ts","path":"src/Interface/Lists"}},{"name":"logoURL","description":"The logo URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":27,"file":"DiscordServices.ts","path":"src/Interface/Lists"}},{"name":"serviceName","description":"Service's name.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":32,"file":"DiscordServices.ts","path":"src/Interface/Lists"}},{"name":"websiteURL","description":"The website URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":37,"file":"DiscordServices.ts","path":"src/Interface/Lists"}}],"methods":[{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["string"]]],"returnsDescription":"The modified URL","meta":{"line":136,"file":"Service.ts","path":"src/Interface"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"options","description":"The options of this request","optional":true,"default":"{}","type":[[["ServiceRequestOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":112,"file":"Service.ts","path":"src/Interface"}},{"name":"postCommands","description":"Posts commands info to your bot page","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"commands","description":"The command info to post","type":[[["Array","<"],["DiscordServicesCommandInfo",">"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":92,"file":"DiscordServices.ts","path":"src/Interface/Lists"}},{"name":"postNews","description":"Posts news to your bot page","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"title","description":"The title of the post","type":[[["string"]]]},{"name":"content","description":"The content of the post","type":[[["string"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":71,"file":"DiscordServices.ts","path":"src/Interface/Lists"}},{"name":"_post","description":"Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.","scope":"static","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"appendBaseURL","description":"Whether to append the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":95,"file":"Service.ts","path":"src/Interface"}},{"name":"get","description":"Gets a service from a key.","scope":"static","params":[{"name":"key","description":"The name of the service to get","type":[[["string"]]]},{"name":"extras","description":"An array of {@link CustomService}s to include","optional":true,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["null"," | ("],["typeof"," "],["Service",")"]]],"meta":{"line":65,"file":"Service.ts","path":"src/Interface"}},{"name":"getAll","description":"Gets every loaded service.","scope":"static","returns":[[["Record","<"],["string",", ("],["typeof"," "],["Service",")>"]]],"meta":{"line":84,"file":"Service.ts","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["ServicePostOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":50,"file":"DiscordServices.ts","path":"src/Interface/Lists"}}],"meta":{"line":20,"file":"DiscordServices.ts","path":"src/Interface/Lists"}},{"name":"DiscordsCom","description":"Represents the Discords.com service (formerly Bots For Discord).","see":["https://docs.discords.com/\n"],"extends":["Service"],"construct":{"name":"constructor","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}],"returns":[[["default"]]]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":46,"file":"Service.ts","path":"src/Interface"}},{"name":"aliases","description":"The values that can be used to select the service.","scope":"static","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":11,"file":"DiscordsCom.ts","path":"src/Interface/Lists"}},{"name":"baseURL","description":"The base URL of the service's API.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":31,"file":"DiscordsCom.ts","path":"src/Interface/Lists"}},{"name":"logoURL","description":"The logo URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":16,"file":"DiscordsCom.ts","path":"src/Interface/Lists"}},{"name":"serviceName","description":"Service's name.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":21,"file":"DiscordsCom.ts","path":"src/Interface/Lists"}},{"name":"websiteURL","description":"The website URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":26,"file":"DiscordsCom.ts","path":"src/Interface/Lists"}}],"methods":[{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["string"]]],"returnsDescription":"The modified URL","meta":{"line":136,"file":"Service.ts","path":"src/Interface"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"options","description":"The options of this request","optional":true,"default":"{}","type":[[["ServiceRequestOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":112,"file":"Service.ts","path":"src/Interface"}},{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID.","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":54,"file":"DiscordsCom.ts","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the list of people who voted a bot.","params":[{"name":"id","description":"The bot's ID.","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":62,"file":"DiscordsCom.ts","path":"src/Interface/Lists"}},{"name":"getBotVotes12h","description":"Gets the list of people who voted a bot in the last 12 hours.","params":[{"name":"id","description":"The bot's ID.","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":79,"file":"DiscordsCom.ts","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed on this service.","params":[{"name":"id","description":"The user's ID.","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":95,"file":"DiscordsCom.ts","path":"src/Interface/Lists"}},{"name":"getUserBots","description":"Gets the user's bots listed for this service.","params":[{"name":"id","description":"The user's ID.","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":103,"file":"DiscordsCom.ts","path":"src/Interface/Lists"}},{"name":"getWidgetURL","description":"Gets the widget URL for this bot.","params":[{"name":"id","description":"The bot's ID.","type":[[["IDResolvable"]]]},{"name":"query","description":"The query that will be used in the request.","optional":true,"type":[[["Query"]]]}],"returns":[[["string"]]],"meta":{"line":112,"file":"DiscordsCom.ts","path":"src/Interface/Lists"}},{"name":"_post","description":"Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.","scope":"static","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"appendBaseURL","description":"Whether to append the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":95,"file":"Service.ts","path":"src/Interface"}},{"name":"get","description":"Gets a service from a key.","scope":"static","params":[{"name":"key","description":"The name of the service to get","type":[[["string"]]]},{"name":"extras","description":"An array of {@link CustomService}s to include","optional":true,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["null"," | ("],["typeof"," "],["Service",")"]]],"meta":{"line":65,"file":"Service.ts","path":"src/Interface"}},{"name":"getAll","description":"Gets every loaded service.","scope":"static","returns":[[["Record","<"],["string",", ("],["typeof"," "],["Service",")>"]]],"meta":{"line":84,"file":"Service.ts","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.\n<warn>Shard data posting is not supported for this service.</warn>","scope":"static","params":[{"name":"options","description":"The options of the request.","type":[[["ServicePostOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":40,"file":"DiscordsCom.ts","path":"src/Interface/Lists"}}],"meta":{"line":9,"file":"DiscordsCom.ts","path":"src/Interface/Lists"}},{"name":"Disforge","description":"Represents the Disforge service.","see":["https://disforge.com/developer\n"],"extends":["Service"],"construct":{"name":"constructor","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}],"returns":[[["default"]]]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":46,"file":"Service.ts","path":"src/Interface"}},{"name":"aliases","description":"The values that can be used to select the service.","scope":"static","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":10,"file":"Disforge.ts","path":"src/Interface/Lists"}},{"name":"baseURL","description":"The base URL of the service's API.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":30,"file":"Disforge.ts","path":"src/Interface/Lists"}},{"name":"logoURL","description":"The logo URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":15,"file":"Disforge.ts","path":"src/Interface/Lists"}},{"name":"serviceName","description":"Service's name.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":20,"file":"Disforge.ts","path":"src/Interface/Lists"}},{"name":"websiteURL","description":"The website URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":25,"file":"Disforge.ts","path":"src/Interface/Lists"}}],"methods":[{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["string"]]],"returnsDescription":"The modified URL","meta":{"line":136,"file":"Service.ts","path":"src/Interface"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"options","description":"The options of this request","optional":true,"default":"{}","type":[[["ServiceRequestOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":112,"file":"Service.ts","path":"src/Interface"}},{"name":"getHomepage","description":"Retreives the data shown on the homepage.","returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":56,"file":"Disforge.ts","path":"src/Interface/Lists"}},{"name":"getStats","description":"Retreives statistics about Disforge.","returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":63,"file":"Disforge.ts","path":"src/Interface/Lists"}},{"name":"_post","description":"Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.","scope":"static","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"appendBaseURL","description":"Whether to append the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":95,"file":"Service.ts","path":"src/Interface"}},{"name":"get","description":"Gets a service from a key.","scope":"static","params":[{"name":"key","description":"The name of the service to get","type":[[["string"]]]},{"name":"extras","description":"An array of {@link CustomService}s to include","optional":true,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["null"," | ("],["typeof"," "],["Service",")"]]],"meta":{"line":65,"file":"Service.ts","path":"src/Interface"}},{"name":"getAll","description":"Gets every loaded service.","scope":"static","returns":[[["Record","<"],["string",", ("],["typeof"," "],["Service",")>"]]],"meta":{"line":84,"file":"Service.ts","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.\n<warn>Shard data posting is not supported for this service.</warn>","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["ServicePostOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":39,"file":"Disforge.ts","path":"src/Interface/Lists"}}],"meta":{"line":8,"file":"Disforge.ts","path":"src/Interface/Lists"}},{"name":"InfinityBotList","description":"Represents the Infinity Bot List service.","see":["https://spider.infinitybots.gg/docs\n"],"extends":["Service"],"construct":{"name":"constructor","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}],"returns":[[["default"]]]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":46,"file":"Service.ts","path":"src/Interface"}},{"name":"aliases","description":"The values that can be used to select the service.","scope":"static","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":10,"file":"InfinityBotList.ts","path":"src/Interface/Lists"}},{"name":"baseURL","description":"The base URL of the service's API.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":35,"file":"InfinityBotList.ts","path":"src/Interface/Lists"}},{"name":"logoURL","description":"The logo URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":20,"file":"InfinityBotList.ts","path":"src/Interface/Lists"}},{"name":"serviceName","description":"Service's name.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":25,"file":"InfinityBotList.ts","path":"src/Interface/Lists"}},{"name":"websiteURL","description":"The website URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":30,"file":"InfinityBotList.ts","path":"src/Interface/Lists"}}],"methods":[{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["string"]]],"returnsDescription":"The modified URL","meta":{"line":136,"file":"Service.ts","path":"src/Interface"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"options","description":"The options of this request","optional":true,"default":"{}","type":[[["ServiceRequestOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":112,"file":"Service.ts","path":"src/Interface"}},{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID.","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":67,"file":"InfinityBotList.ts","path":"src/Interface/Lists"}},{"name":"getBots","description":"Gets a list of all bots on this service.","returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":74,"file":"InfinityBotList.ts","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed on this service.","params":[{"name":"id","description":"The user's ID.","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":84,"file":"InfinityBotList.ts","path":"src/Interface/Lists"}},{"name":"_post","description":"Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.","scope":"static","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"appendBaseURL","description":"Whether to append the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":95,"file":"Service.ts","path":"src/Interface"}},{"name":"get","description":"Gets a service from a key.","scope":"static","params":[{"name":"key","description":"The name of the service to get","type":[[["string"]]]},{"name":"extras","description":"An array of {@link CustomService}s to include","optional":true,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["null"," | ("],["typeof"," "],["Service",")"]]],"meta":{"line":65,"file":"Service.ts","path":"src/Interface"}},{"name":"getAll","description":"Gets every loaded service.","scope":"static","returns":[[["Record","<"],["string",", ("],["typeof"," "],["Service",")>"]]],"meta":{"line":84,"file":"Service.ts","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request.","type":[[["ServicePostOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":43,"file":"InfinityBotList.ts","path":"src/Interface/Lists"}}],"meta":{"line":8,"file":"InfinityBotList.ts","path":"src/Interface/Lists"}},{"name":"Radarcord","description":"Represents the Radarcord service (formerly Radar Bot Directory).","see":["https://docs.radarcord.net/\n"],"extends":["Service"],"construct":{"name":"constructor","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}],"returns":[[["default"]]]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":46,"file":"Service.ts","path":"src/Interface"}},{"name":"aliases","description":"The values that can be used to select the service.","scope":"static","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":10,"file":"Radarcord.ts","path":"src/Interface/Lists"}},{"name":"baseURL","description":"The base URL of the service's API.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":36,"file":"Radarcord.ts","path":"src/Interface/Lists"}},{"name":"logoURL","description":"The logo URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":21,"file":"Radarcord.ts","path":"src/Interface/Lists"}},{"name":"serviceName","description":"Service's name.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":26,"file":"Radarcord.ts","path":"src/Interface/Lists"}},{"name":"websiteURL","description":"The website URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":31,"file":"Radarcord.ts","path":"src/Interface/Lists"}}],"methods":[{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["string"]]],"returnsDescription":"The modified URL","meta":{"line":136,"file":"Service.ts","path":"src/Interface"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"options","description":"The options of this request","optional":true,"default":"{}","type":[[["ServiceRequestOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":112,"file":"Service.ts","path":"src/Interface"}},{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":63,"file":"Radarcord.ts","path":"src/Interface/Lists"}},{"name":"getBotReviews","description":"Gets the bot's reviews on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":88,"file":"Radarcord.ts","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the Unix Epoch Timestamp of the last time this user voted for this bot on this service.","params":[{"name":"botID","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"userID","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":72,"file":"Radarcord.ts","path":"src/Interface/Lists"}},{"name":"_post","description":"Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.","scope":"static","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"appendBaseURL","description":"Whether to append the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":95,"file":"Service.ts","path":"src/Interface"}},{"name":"get","description":"Gets a service from a key.","scope":"static","params":[{"name":"key","description":"The name of the service to get","type":[[["string"]]]},{"name":"extras","description":"An array of {@link CustomService}s to include","optional":true,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["null"," | ("],["typeof"," "],["Service",")"]]],"meta":{"line":65,"file":"Service.ts","path":"src/Interface"}},{"name":"getAll","description":"Gets every loaded service.","scope":"static","returns":[[["Record","<"],["string",", ("],["typeof"," "],["Service",")>"]]],"meta":{"line":84,"file":"Service.ts","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["ServicePostOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":44,"file":"Radarcord.ts","path":"src/Interface/Lists"}}],"meta":{"line":8,"file":"Radarcord.ts","path":"src/Interface/Lists"}},{"name":"TopGG","description":"Represents the Top.gg service.","see":["https://docs.top.gg/\n"],"extends":["Service"],"construct":{"name":"constructor","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}],"returns":[[["default"]]]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":46,"file":"Service.ts","path":"src/Interface"}},{"name":"aliases","description":"The values that can be used to select the service.","scope":"static","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":11,"file":"TopGG.ts","path":"src/Interface/Lists"}},{"name":"baseURL","description":"The base URL of the service's API.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":31,"file":"TopGG.ts","path":"src/Interface/Lists"}},{"name":"logoURL","description":"The logo URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":16,"file":"TopGG.ts","path":"src/Interface/Lists"}},{"name":"serviceName","description":"Service's name.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":21,"file":"TopGG.ts","path":"src/Interface/Lists"}},{"name":"websiteURL","description":"The website URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":26,"file":"TopGG.ts","path":"src/Interface/Lists"}}],"methods":[{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["string"]]],"returnsDescription":"The modified URL","meta":{"line":136,"file":"Service.ts","path":"src/Interface"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"options","description":"The options of this request","optional":true,"default":"{}","type":[[["ServiceRequestOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":112,"file":"Service.ts","path":"src/Interface"}},{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID.","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":84,"file":"TopGG.ts","path":"src/Interface/Lists"}},{"name":"getBotStats","description":"Gets the bot's stats listed on this service.","params":[{"name":"id","description":"The bot's ID.","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":98,"file":"TopGG.ts","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the list of people who voted this bot on this service.","params":[{"name":"id","description":"The bot's ID.","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":112,"file":"TopGG.ts","path":"src/Interface/Lists"}},{"name":"getBots","description":"Gets the a of bots on this service that match your query (refer to Top.gg docs for query parameters).","params":[{"name":"query","description":"The query string that will be used in the request.","type":[[["Query"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":73,"file":"TopGG.ts","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed on this service.","params":[{"name":"id","description":"The user's ID.","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":59,"file":"TopGG.ts","path":"src/Interface/Lists"}},{"name":"getWidgetURL","description":"Gets the widget URL for this bot.","params":[{"name":"id","description":"The bot's ID.","type":[[["IDResolvable"]]]},{"name":"query","description":"The query string that will be used in the request.","optional":true,"type":[[["Query"]]]},{"name":"smallWidget","description":"The sub-path name to turn the widget into a badge (i.e. owner).","optional":true,"type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":144,"file":"TopGG.ts","path":"src/Interface/Lists"}},{"name":"userVoted","description":"Checks whether or not a user has voted for a bot on this service.","params":[{"name":"botID","description":"The bot's ID.","type":[[["IDResolvable"]]]},{"name":"userID","description":"The user's ID.","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":127,"file":"TopGG.ts","path":"src/Interface/Lists"}},{"name":"_post","description":"Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.","scope":"static","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"appendBaseURL","description":"Whether to append the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":95,"file":"Service.ts","path":"src/Interface"}},{"name":"get","description":"Gets a service from a key.","scope":"static","params":[{"name":"key","description":"The name of the service to get","type":[[["string"]]]},{"name":"extras","description":"An array of {@link CustomService}s to include","optional":true,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["null"," | ("],["typeof"," "],["Service",")"]]],"meta":{"line":65,"file":"Service.ts","path":"src/Interface"}},{"name":"getAll","description":"Gets every loaded service.","scope":"static","returns":[[["Record","<"],["string",", ("],["typeof"," "],["Service",")>"]]],"meta":{"line":84,"file":"Service.ts","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request.","type":[[["ServicePostOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":39,"file":"TopGG.ts","path":"src/Interface/Lists"}}],"meta":{"line":9,"file":"TopGG.ts","path":"src/Interface/Lists"}},{"name":"VoidBots","description":"Represents the Void Bots service.","see":["https://docs.voidbots.net/\n"],"extends":["Service"],"construct":{"name":"constructor","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}],"returns":[[["default"]]]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":46,"file":"Service.ts","path":"src/Interface"}},{"name":"aliases","description":"The values that can be used to select the service.","scope":"static","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":10,"file":"VoidBots.ts","path":"src/Interface/Lists"}},{"name":"baseURL","description":"The base URL of the service's API.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":30,"file":"VoidBots.ts","path":"src/Interface/Lists"}},{"name":"logoURL","description":"The logo URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":15,"file":"VoidBots.ts","path":"src/Interface/Lists"}},{"name":"serviceName","description":"Service's name.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":20,"file":"VoidBots.ts","path":"src/Interface/Lists"}},{"name":"websiteURL","description":"The website URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":25,"file":"VoidBots.ts","path":"src/Interface/Lists"}}],"methods":[{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["string"]]],"returnsDescription":"The modified URL","meta":{"line":136,"file":"Service.ts","path":"src/Interface"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"options","description":"The options of this request","optional":true,"default":"{}","type":[[["ServiceRequestOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":112,"file":"Service.ts","path":"src/Interface"}},{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID.","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":57,"file":"VoidBots.ts","path":"src/Interface/Lists"}},{"name":"getBotAnalytics","description":"Gets the bot's analytics on this service.","params":[{"name":"id","description":"The bot's ID.","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":104,"file":"VoidBots.ts","path":"src/Interface/Lists"}},{"name":"getBotReviews","description":"Gets the bot's reviews on this service.","params":[{"name":"id","description":"The bot's ID.","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":90,"file":"VoidBots.ts","path":"src/Interface/Lists"}},{"name":"userVoted","description":"Checks whether or not a user has voted for a bot on this service.","params":[{"name":"botID","description":"The bot's ID.","type":[[["IDResolvable"]]]},{"name":"userID","description":"The user's ID.","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":74,"file":"VoidBots.ts","path":"src/Interface/Lists"}},{"name":"_post","description":"Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.","scope":"static","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"appendBaseURL","description":"Whether to append the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":95,"file":"Service.ts","path":"src/Interface"}},{"name":"get","description":"Gets a service from a key.","scope":"static","params":[{"name":"key","description":"The name of the service to get","type":[[["string"]]]},{"name":"extras","description":"An array of {@link CustomService}s to include","optional":true,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["null"," | ("],["typeof"," "],["Service",")"]]],"meta":{"line":65,"file":"Service.ts","path":"src/Interface"}},{"name":"getAll","description":"Gets every loaded service.","scope":"static","returns":[[["Record","<"],["string",", ("],["typeof"," "],["Service",")>"]]],"meta":{"line":84,"file":"Service.ts","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request.","type":[[["ServicePostOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":38,"file":"VoidBots.ts","path":"src/Interface/Lists"}}],"meta":{"line":8,"file":"VoidBots.ts","path":"src/Interface/Lists"}},{"name":"YABL","description":"Represents the YABL service.","see":["https://yabl.xyz/api\n"],"extends":["Service"],"construct":{"name":"constructor","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}],"returns":[[["default"]]]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":46,"file":"Service.ts","path":"src/Interface"}},{"name":"aliases","description":"The values that can be used to select the service.","scope":"static","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":11,"file":"YABL.ts","path":"src/Interface/Lists"}},{"name":"baseURL","description":"The base URL of the service's API.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":31,"file":"YABL.ts","path":"src/Interface/Lists"}},{"name":"logoURL","description":"The logo URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":16,"file":"YABL.ts","path":"src/Interface/Lists"}},{"name":"serviceName","description":"Service's name.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":21,"file":"YABL.ts","path":"src/Interface/Lists"}},{"name":"websiteURL","description":"The website URL.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":26,"file":"YABL.ts","path":"src/Interface/Lists"}}],"methods":[{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["string"]]],"returnsDescription":"The modified URL","meta":{"line":136,"file":"Service.ts","path":"src/Interface"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"options","description":"The options of this request","optional":true,"default":"{}","type":[[["ServiceRequestOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":112,"file":"Service.ts","path":"src/Interface"}},{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":67,"file":"YABL.ts","path":"src/Interface/Lists"}},{"name":"getBots","description":"Gets a list of bots on this service.","returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":85,"file":"YABL.ts","path":"src/Interface/Lists"}},{"name":"getBotsByPage","description":"Gets a page of bots on this service.","params":[{"name":"query","description":"The query string that will be used in the request","type":[[["Query"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":101,"file":"YABL.ts","path":"src/Interface/Lists"}},{"name":"getRandomBots","description":"Gets 20 random bots from this service.","returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":72,"file":"YABL.ts","path":"src/Interface/Lists"}},{"name":"getUnverifiedBots","description":"Gets a list of unverified bots on this service.","returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":106,"file":"YABL.ts","path":"src/Interface/Lists"}},{"name":"getUserBots","description":"Gets the user's bots listed for this service.","params":[{"name":"id","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":80,"file":"YABL.ts","path":"src/Interface/Lists"}},{"name":"invalidate","description":"Invalidates the token being used in the request.","returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":51,"file":"YABL.ts","path":"src/Interface/Lists"}},{"name":"_post","description":"Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.","scope":"static","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"appendBaseURL","description":"Whether to append the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":95,"file":"Service.ts","path":"src/Interface"}},{"name":"get","description":"Gets a service from a key.","scope":"static","params":[{"name":"key","description":"The name of the service to get","type":[[["string"]]]},{"name":"extras","description":"An array of {@link CustomService}s to include","optional":true,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["null"," | ("],["typeof"," "],["Service",")"]]],"meta":{"line":65,"file":"Service.ts","path":"src/Interface"}},{"name":"getAll","description":"Gets every loaded service.","scope":"static","returns":[[["Record","<"],["string",", ("],["typeof"," "],["Service",")>"]]],"meta":{"line":84,"file":"Service.ts","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.\n<warn>Shard data posting is not supported for this service.</warn>","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["ServicePostOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":40,"file":"YABL.ts","path":"src/Interface/Lists"}}],"meta":{"line":9,"file":"YABL.ts","path":"src/Interface/Lists"}},{"name":"Poster","description":"A class that posts server count to listing site(s).","construct":{"name":"constructor","params":[{"name":"options","description":"The options needed to construct the poster","type":[[["PosterOptions"]]]}],"returns":[[["Poster"]]],"meta":{"line":57,"file":"Poster.ts","path":"src/Interface"}},"props":[{"name":"_clientFiller","description":"The client filler used in the poster","access":"private","type":[[["null"," | "],["ClientFiller"]]],"meta":{"line":47,"file":"Poster.ts","path":"src/Interface"}},{"name":"_interval","description":"Interval that posts to all services","access":"private","type":[[["number"]]],"meta":{"line":50,"file":"Poster.ts","path":"src/Interface"}},{"name":"apiKeys","description":"The API keys that the poster is using","type":[[["Record","<"],["string",", "],["string",">"]]],"meta":{"line":38,"file":"Poster.ts","path":"src/Interface"}},{"name":"client","description":"The client that will be used to fetch the stats","type":[[["undefined"," | "],["object"]]],"meta":{"line":32,"file":"Poster.ts","path":"src/Interface"}},{"name":"customServices","description":"An array of custom services that the poster uses","type":[[["Array","<"],["any",">"]]],"meta":{"line":35,"file":"Poster.ts","path":"src/Interface"}},{"name":"handlers","description":"The list of event handlers for every custom event","type":[[["Record","<"],["CustomEvent",", "],["Array","<"],["eventHandler",">>"]]],"meta":{"line":44,"file":"Poster.ts","path":"src/Interface"}},{"name":"options","description":"The options the poster was built with","readonly":true,"type":[[["PosterOptions"]]],"meta":{"line":41,"file":"Poster.ts","path":"src/Interface"}},{"name":"clientFiller","description":"The client filler used in the poster","readonly":true,"type":[[["undefined"," | "],["ClientFiller"]]],"meta":{"line":86,"file":"Poster.ts","path":"src/Interface"}}],"methods":[{"name":"addHandler","description":"Adds an handler for an event.","params":[{"name":"event","description":"The name of the event to add the handler to","type":[[["CustomEvent"]]]},{"name":"handler","description":"The function that is run with the event","type":[[["eventHandler"]]]}],"returns":[[["Array","<"],["eventHandler",">"]]],"returnsDescription":"The array of handlers currently set for that event\n","meta":{"line":331,"file":"Poster.ts","path":"src/Interface"}},{"name":"getServerCount","description":"Retrieves the current server count of the client/shard.","returns":[[["Promise","<"],["number",">"]]],"returnsDescription":"Amount of servers the client/shard is in\n","meta":{"line":102,"file":"Poster.ts","path":"src/Interface"}},{"name":"getService","description":"Gets a service, autofilling its API key if the poster has it.","params":[{"name":"service","description":"The service to get","type":[[["string"]]]}],"returns":[[["any"]]],"meta":{"line":178,"file":"Poster.ts","path":"src/Interface"}},{"name":"getUserCount","description":"Retrieves the current user count of the client/shard.","returns":[[["Promise","<"],["number",">"]]],"returnsDescription":"Amount of users the client/shard is connected with\n","meta":{"line":118,"file":"Poster.ts","path":"src/Interface"}},{"name":"getVoiceConnections","description":"Retrieves the current voice connection count of the client/shard.","returns":[[["Promise","<"],["number",">"]]],"returnsDescription":"Number of active voice connections\n","meta":{"line":134,"file":"Poster.ts","path":"src/Interface"}},{"name":"post","description":"Posts the current clients server count to a service.","see":["Poster#postManual"],"examples":[],"emits":["Poster#postSuccess","Poster#postFail\n"],"params":[{"name":"service","description":"The service to post to","optional":true,"default":"'all'","type":[[["string"]]]}],"returns":[[["Promise","<"],["object"," | "],["Array","<"],["object",">>"]]],"returnsDescription":"The result(s) of the post","meta":{"line":200,"file":"Poster.ts","path":"src/Interface"}},{"name":"postManual","description":"Manually posts a server count to a service.","params":[{"name":"service","description":"The service to post to","type":[[["string"]]]},{"name":"counts","description":"An object containing the tallies of servers, users and voice connections","type":[[["manualPostOptions"]]]}],"returns":[[["Promise","<"],["object"," | "],["Array","<"],["object",">>"]]],"returnsDescription":"The result(s) of the post\n","meta":{"line":224,"file":"Poster.ts","path":"src/Interface"}},{"name":"removeHandler","description":"Removes an handler for an event.","params":[{"name":"event","description":"The name of the event to remove the handler from","type":[[["CustomEvent"]]]},{"name":"handler","description":"The function that is run with the event","type":[[["eventHandler"]]]}],"returns":[[["Array","<"],["eventHandler",">"]]],"returnsDescription":"The array of handlers currently set for that event\n","meta":{"line":346,"file":"Poster.ts","path":"src/Interface"}},{"name":"runHandlers","description":"Manually triggers an event with custom arguments.","params":[{"name":"event","description":"The name of the event to run the handlers for","type":[[["CustomEvent"]]]},{"name":"args","description":"The arguments to pass to the handlers","type":[[["Array","<"],["any",">"]]]}],"returns":[[["void"]]],"meta":{"line":361,"file":"Poster.ts","path":"src/Interface"}},{"name":"startInterval","description":"Creates an interval that posts to all services.","see":[],"examples":[],"emits":["Poster#autopostSuccess","Poster#autopostFail\n"],"params":[{"name":"interval","description":"The time (in ms) to reach to post to all {@link Service}s again","optional":true,"default":"1800000","type":[[["number"]]]}],"returns":[[["number"]]],"returnsDescription":"The interval that is responsible for posting","meta":{"line":153,"file":"Poster.ts","path":"src/Interface"}},{"name":"stopInterval","description":"Destroys the current interval.","returns":[[["void"]]],"meta":{"line":170,"file":"Poster.ts","path":"src/Interface"}}],"meta":{"line":29,"file":"Poster.ts","path":"src/Interface"}},{"name":"Service","description":"Represents a basic service.","construct":{"name":"constructor","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}],"returns":[[["Service"]]],"meta":{"line":51,"file":"Service.ts","path":"src/Interface"}},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":46,"file":"Service.ts","path":"src/Interface"}},{"name":"aliases","description":"The values that can be used to select the service.","scope":"static","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":149,"file":"Service.ts","path":"src/Interface"}},{"name":"baseURL","description":"The base URL of the service's API.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":56,"file":"Service.ts","path":"src/Interface"}},{"name":"logoURL","description":"The logo URL, used only for documentation.","scope":"static","access":"private","readonly":true,"type":[[["string"]]],"meta":{"line":157,"file":"Service.ts","path":"src/Interface"}},{"name":"serviceName","description":"Service's name, used only for documentation.","scope":"static","access":"private","readonly":true,"type":[[["string"]]],"meta":{"line":165,"file":"Service.ts","path":"src/Interface"}},{"name":"websiteURL","description":"The website URL, used only for documentation.","scope":"static","access":"private","readonly":true,"type":[[["string"]]],"meta":{"line":173,"file":"Service.ts","path":"src/Interface"}}],"methods":[{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["string"]]],"returnsDescription":"The modified URL","meta":{"line":136,"file":"Service.ts","path":"src/Interface"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"options","description":"The options of this request","optional":true,"default":"{}","type":[[["ServiceRequestOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":112,"file":"Service.ts","path":"src/Interface"}},{"name":"_post","description":"Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.","scope":"static","access":"private","params":[{"name":"form","description":"The request form","type":[[["RequestForm"]]]},{"name":"appendBaseURL","description":"Whether to append the service's base API url","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":95,"file":"Service.ts","path":"src/Interface"}},{"name":"get","description":"Gets a service from a key.","scope":"static","params":[{"name":"key","description":"The name of the service to get","type":[[["string"]]]},{"name":"extras","description":"An array of {@link CustomService}s to include","optional":true,"type":[[["Array","<"],["any",">"]]]}],"returns":[[["null"," | ("],["typeof"," "],["Service",")"]]],"meta":{"line":65,"file":"Service.ts","path":"src/Interface"}},{"name":"getAll","description":"Gets every loaded service.","scope":"static","returns":[[["Record","<"],["string",", ("],["typeof"," "],["Service",")>"]]],"meta":{"line":84,"file":"Service.ts","path":"src/Interface"}},{"name":"post","scope":"static","params":[{"name":"options","type":[[["ServicePostOptions"]]]}],"returns":[[["Promise","<"],["AxiosResponse","<"],["any",", "],["any",">>"]]],"meta":{"line":177,"file":"Service.ts","path":"src/Interface"}}],"meta":{"line":41,"file":"Service.ts","path":"src/Interface"}},{"name":"Util","description":"Contains various general-purpose utility methods.","construct":{"name":"constructor","returns":[[["Util"]]],"meta":{"line":31,"file":"Util.ts","path":"src/Utils"}},"methods":[{"name":"resolveCount","description":"Resolves data into a countable number that is finite and positive.","scope":"static","params":[{"name":"data","description":"The data to resolve","type":[[["any"]]]}],"returns":[[["number"]]],"meta":{"line":64,"file":"Util.ts","path":"src/Utils"}},{"name":"resolveID","description":"Resolves data into a Discord ID.","scope":"static","params":[{"name":"data","description":"The data to resolve","type":[[["IDResolvable"]]]}],"returns":[[["string"]]],"meta":{"line":41,"file":"Util.ts","path":"src/Utils"}}],"meta":{"line":30,"file":"Util.ts","path":"src/Utils"}}],"typedefs":[{"name":"DiscordBotsGGUserAgent","description":"The user agent used options for the DiscordBotsGG service","meta":{"line":6,"file":"DiscordBotsGG.ts","path":"src/Interface/Lists"},"props":[{"name":"clientID","description":"The bot ID for the user agent","type":[[["string"]]]},{"name":"library","description":"The bot's library","type":[[["string"]]]}]},{"name":"DiscordServicesCommandInfo","description":"The options to use when posting command info for the DiscordServices service","meta":{"line":5,"file":"DiscordServices.ts","path":"src/Interface/Lists"},"props":[{"name":"category","description":"The category of your command","type":[[["string"]]]},{"name":"command","description":"The command name including the prefix","type":[[["string"]]]},{"name":"desc","description":"The description for your command","type":[[["string"]]]}]},{"name":"manualPostOptions","meta":{"line":17,"file":"Poster.ts","path":"src/Interface"},"props":[{"name":"serverCount","description":"The server count to post to the service","type":[[["number"]]]},{"name":"userCount","description":"The user count to post to the service","optional":true,"type":[[["number"]]]},{"name":"voiceConnections","description":"The voice connection count to post to the service","optional":true,"type":[[["number"]]]}]},{"name":"ServicePostOptions","description":"Options provided when posting to a service","meta":{"line":20,"file":"Service.ts","path":"src/Interface"},"props":[{"name":"clientID","description":"The client ID that the request will post for","type":[[["IDResolvable"]]]},{"name":"serverCount","description":"The amount of servers that the client is in","type":[[["any"]]]},{"name":"shard","description":"The shard the request is representing","optional":true,"type":[[["Shard"]]]},{"name":"token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"userCount","description":"The amount of users that the client cached","type":[[["any"]]]},{"name":"voiceConnections","description":"The number of voice connections","optional":true,"type":[[["any"]]]}]},{"name":"ServiceRequestOptions","description":"Options provided when sending a service request","meta":{"line":11,"file":"Service.ts","path":"src/Interface"},"props":[{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]},{"name":"requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]}]},{"name":"PostRequestData","description":"The object that is given to {@link Service}s and {@link CustomService}s in order to send requests to them.","meta":{"line":64,"file":"Constants.ts","path":"src/Utils"},"props":[{"name":"clientID","description":"The client ID that the request will post for","optional":true,"type":[[["string"]]]},{"name":"serverCount","description":"The amount of servers that the client is in","optional":true,"type":[[["number"]]]},{"name":"shard","description":"The shard the request is representing","optional":true,"type":[[["Shard"]]]},{"name":"token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"userCount","description":"The amount of users that the client cached","optional":true,"type":[[["number"]]]},{"name":"voiceConnections","description":"The amount of voice connections the client has","optional":true,"type":[[["number"]]]}]},{"name":"PosterOptions","description":"Options for a poster.","meta":{"line":4,"file":"Constants.ts","path":"src/Utils"},"props":[{"name":"apiKeys","description":"An object that pairs a {@link ServiceKey} with their token","optional":true,"default":"{}\n","type":[[["Record","<"],["string",", "],["string",">"]]]},{"name":"client","description":"The client that a supported {@link Library} uses to manage the Discord application.\nRequires {@link #clientLibrary} to be present","optional":true,"type":[[["object"]]]},{"name":"clientID","description":"The client ID used for posting to a {@link Service}.\nAutomatically filled in when {@link #client} is present","optional":true,"type":[[["string"]]]},{"name":"clientLibrary","description":"The library that the client is based on","optional":true,"type":[[["Library"]]]},{"name":"customServices","description":"The custom services that the poster will use","optional":true,"default":"[]\n","type":[[["Array","<"],["any",">"]]]},{"name":"post","description":"The function to use when posting to a server that uses the client ID, the amount of servers, and a {@link Shard}.\nThis will be used when the {@link ServiceKey} is `custom`","optional":true,"type":[[["PromiseResolvable","<"],["void",">"]]]},{"name":"serverCount","description":"The function to use when retrieving the amount of servers a client/shard is in, using the client as a parameter","optional":true,"type":[[["PromiseResolvable","<"],["number",">"]]]},{"name":"shard","description":"The shard data for using different methods of posting to services","optional":true,"type":[[["Shard"]]]},{"name":"useSharding","description":"Whether or not to use a {@link Service}s sharding methods when posting","optional":true,"default":"true\n","type":[[["boolean"]]]},{"name":"userCount","description":"The function to use when retrieving the amount of users a client/shard is connected with, using the client as a parameter","optional":true,"type":[[["PromiseResolvable","<"],["number",">"]]]},{"name":"voiceConnections","description":"The function to use when retrieving the number of active voice connections, using the client as a parameter","optional":true,"type":[[["PromiseResolvable","<"],["number",">"]]]}]},{"name":"Shard","description":"A shard that is used when posting to services.","meta":{"line":58,"file":"Constants.ts","path":"src/Utils"},"props":[{"name":"count","optional":true,"type":[[["number"]]]},{"name":"id","optional":true,"type":[[["number"]]]}]},{"name":"CustomEvent","description":"An event that can be added an handler for. These are the available events:\n* autopostSuccess\n* autopostFail\n* postSuccess\n* postFail","type":[[["'autopostSuccess'"," | "],["'autopostFail'"," | "],["'postSuccess'"," | "],["'postFail'"]]],"meta":{"line":138,"file":"Constants.ts","path":"src/Utils"}},{"name":"CustomService","description":"A mock of a {@link Service} that only consists of the nessessities for a poster to use it.\n<warn>When you're passing your custom services to method in this package, remmeber to use pass the actual service class, not an instance of it.</warn>","see":[],"type":[[["any"]]],"meta":{"line":101,"file":"Constants.ts","path":"src/Utils"}},{"name":"Library","description":"A library supported by the package. Here are the available libraries:\n* discord.js\n* discord.io\n* discordie\n* eris\n* paracord","type":[[["'discord","."],["js'"," | "],["'discord","."],["io'"," | "],["'discordie'"," | "],["'eris'"," | "],["'paracord'"]]],"meta":{"line":118,"file":"Constants.ts","path":"src/Utils"}},{"name":"Query","description":"An object with all query parameters","type":[[["Record","<"],["string",", "],["string"," | "],["number"," | "],["boolean",">"]]],"meta":{"line":85,"file":"Constants.ts","path":"src/Utils"}},{"name":"ServiceKey","description":"A {@link Service} key supported by the package.\nThis can also includes keys from {@link CustomService}s and can be `custom` if a {@link Poster} has a custom post function.","see":["{@link https://dbots.js.org/#/docs/main/master/general/services}\n"],"type":[[["string"]]],"meta":{"line":108,"file":"Constants.ts","path":"src/Utils"}},{"name":"eventHandler","description":"Type of function to set for handlers","type":[[["("],["result",": "],["object"," | "],["Array","<"],["object",">) => "],["void"]]],"meta":{"line":129,"file":"Constants.ts","path":"src/Utils"},"params":[{"name":"result","description":"The result(s) of the post\n","type":[[["object"," | "],["Array","<"],["object",">"]]]}],"returns":[[["void"]]]},{"name":"PromiseResolvable","description":"Data that can be resolved to give a string. This can either be a Function or a Promise.","type":[[["stringCallback"," | "],["eventHandler"," | "],["Promise","<"],["T",">"]]],"meta":{"line":7,"file":"EnsurePromise.ts","path":"src/Utils"}},{"name":"stringCallback","description":"A generic string callback","type":[[["("],["args",": "],["Array","<"],["any",">) => "],["string"]]],"meta":{"line":4,"file":"EnsurePromise.ts","path":"src/Utils"},"params":[{"name":"args","type":[[["Array","<"],["any",">"]]]}],"returns":[[["string"]]]},{"name":"AxiosResponse","description":"The response from the axios call","see":["{@link https://github.com/axios/axios#response-schema}\n"],"meta":{"line":393,"file":"index.d.ts","path":"node_modules/axios"},"props":[{"name":"config","type":[[["InternalAxiosRequestConfig","<"],["D",">"]]]},{"name":"data","type":[[["T"]]]},{"name":"headers","type":[[["AxiosResponseHeaders"," | "],["Partial","<"],["RawAxiosHeaders"," & {"],["\n\n","} & {"],["\nset","-"],["cookie",": "],["Array","<"],["string",">"],["\n","}>"]]]},{"name":"request","optional":true,"type":[[["any"]]]},{"name":"status","type":[[["number"]]]},{"name":"statusText","type":[[["string"]]]}]},{"name":"RequestForm","access":"private","meta":{"line":22,"file":"FormatRequest.ts","path":"src/Utils"},"props":[{"name":"data","description":"The data to send with the request, if the method allows it","optional":true,"type":[[["Record","<"],["string",", "],["any",">"]]]},{"name":"headers","description":"The headers to append to the request","optional":true,"type":[[["Record","<"],["string",", "],["string",">"]]]},{"name":"method","description":"The method to use","optional":true,"type":[[["string"]]]},{"name":"params","description":"The query parameters for the request","optional":true,"type":[[["Record","<"],["string",", "],["string"," | "],["number"," | "],["boolean",">"]]]},{"name":"url","description":"The URL for the request","type":[[["string"]]]}]},{"name":"AnyObject","description":"Just a utility type representing an object","type":[[["Record","<"],["string",", "],["any",">"]]],"meta":{"line":19,"file":"Util.ts","path":"src/Utils"}},{"name":"CountResolvable","description":"Data that can be resolved to give a finite and positive integer.\nThis can include any value that can be parsed into an integer.","type":[[["any"]]],"meta":{"line":16,"file":"Util.ts","path":"src/Utils"}},{"name":"IDResolvable","description":"Data that can be resolved to give a Discord ID, this can be:\n* A string\n* A number\n* Any value with an `id` key","type":[[["string"," | "],["number"," | "],["Record","<"],["'id'",", "],["string",">"]]],"meta":{"line":10,"file":"Util.ts","path":"src/Utils"}}]}